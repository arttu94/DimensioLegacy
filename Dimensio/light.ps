Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
	//float edge;
    float4 specularColor;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
	float3 reflection;
    float4 specular;

    textureColor = shaderTexture.Sample(SampleType, input.tex);

	color = ambientColor;

	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    lightDir = -lightDirection;

    lightIntensity = saturate(dot(input.normal, lightDir));

	/*if(lightIntensity > 0.6f)
	{
		lightIntensity = 1.0f;
	}
	if(lightIntensity < 0.6f && lightIntensity > 0.3f)
	{
		lightIntensity = 0.5f;
	}
	if(lightIntensity < 0.3f)
	{
		lightIntensity = 0.1f;
	}*/

	if(lightIntensity > 0.5f)
	{
		lightIntensity = 1.0f;
	}
	if(lightIntensity < 0.5f)
	{
		lightIntensity = 0.1f;
	}

	if(lightIntensity > 0.0f)
    {
        color += (diffuseColor * lightIntensity);

		color = saturate(color);

		//reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		//specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

	//color = color * 0.3f; //alpha????

	//color = color * float4(0.54f, 0.26f, 0.07f, 1.0f);

	if(specularPower == 1)
	{
		color = color * float4(0.0f, 0.0f, 0.0f, 1.0f);
	}
	else
	{
		 color = color * textureColor;
	}

	color = saturate(color + specular);

    return color;
}